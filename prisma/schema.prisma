// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum DocumentType {
  TXT
  PDF
  EPUB
  DOC
  DOCX
  CSV
  TSV
  MARKDOWN
  HTML
  UNKNOWN
}

enum DocumentLang {
  ENG
  CHI
  ZHO
  JPN
}

enum DocumentState {
  SUCCESS
  FAILED
  PENDING
  PROCESSING
}

model Category {
  id        Int        @id @default(autoincrement()) @db.SmallInt
  name      String     @db.VarChar(64)
  alias     String?    @db.VarChar(64)
  documents Document[]
}

model Tag {
  id        Int        @id @default(autoincrement()) @db.SmallInt
  name      String     @db.VarChar(64)
  alias     String?    @db.VarChar(64)
  documents Document[]
}

model Document {
  /// file content sha256, that's make sure no same file
  id          String        @id @db.VarChar(64)
  /// one-to-one: a doc to a category
  categoryId  Int           @db.SmallInt
  category    Category      @relation(fields: [categoryId], references: [id])
  /// one-to-many: a doc to several tags
  tags        Tag[]
  /// file type
  type        DocumentType
  lang        DocumentLang  @default(ENG)
  /// one-to-one: a doc to a user
  userId      Int
  user        User          @relation(fields: [userId], references: [id])

  title       String        @db.Text()
  keywords    String[]      @db.Text()
  description String        @db.Text()
  coverUrl    String?       @db.Text()
  /// original authors
  authors     String[]      @db.VarChar(128)

  visible     Boolean       @default(true)
  viewCount   Int           @default(0)
  state       DocumentState @default(PENDING)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
}

model User {
  /// unique userId for the system
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(64)
  /// use age to show the right content
  age       Int        @db.SmallInt
  /// unique public userId for the system
  email     String     @unique @db.VarChar(128)
  avatar    String?    @db.VarChar(300)
  /// description for user
  bio       String?    @db.VarChar(255)
  /// documents that a user posted
  posts     Document[]
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
}
